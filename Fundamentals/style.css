/*
  Oh Hello!
  These are some base styles so that our tutorial looks good.
  Let's go through the important bits real quick
*/
:root {
     --yellow: #ffc600;
     --black: #272727;
}
   
html {
/* border-box box model allows us to add padding and border to our elements without increasing their size */
box-sizing: border-box;
/* A system font stack so things load nice and quick! */
font-family: 
-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
     Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
font-weight: 900;
font-size: 10px;
color: var(--black);
text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);
}
   
   /*
     WAT IS THIS?!
     We inherit box-sizing: border-box; from our <html> selector
     Apparently this is a bit better than applying box-sizing: border-box; directly to the * selector
   */
*,
*:before,
*:after {
     box-sizing: inherit;
}

body {
     background-image: 
          url("./images/topography.svg"),
          linear-gradient(110deg, #f93d66, #6d47d9);
     background-size: cover;
     min-height: calc(100vh - 100px);
     margin: 50px;
     /* background: white; */
     background-attachment: fixed;
     letter-spacing: -1px;
}
   
h1,
h2,
h3,
h4,
h5,
h6 {
     margin: 0 0 5px 0;
}

/* Each item in our grid will contain numbers */
.item {
     /* We center the contents of these items. You can also do this with flexbox too! */
     display: grid;
     /* justify-content: center;
     align-items: center; */
     place-items: center;
     border: 2px solid rgba(0, 0, 0, 0.03);
     border-radius: 3px;
     font-size: 35px;
     background-color: var(--yellow); /* best colour */
}
   
.item p {
     margin: 0 0 5px 0;
}

/* .container{
     display: grid;
     grid-template-columns: 1fr 1fr 1fr;
     grid-template-rows: 2fr 1fr 3fr 4fr;
     grid-auto-rows: 2fr; /* ? this line decides the size of the implicit rows after 4th row cz we set the size of 1 2 3 4th row in the above line.. if we give more than 1 then it alternates it 
     grid-gap: 20px;
}  */

/* .container{
     display: grid;
     grid-template-columns: repeat(5, 1fr);
     grid-gap: 2em;
}

/* .item9{
     background-color: mistyrose;
     grid-column: span 2;
     grid-row: span 2;
} */

/* .item9{
     background-color: mistyrose;
     grid-column: 2 / 4; /* grid-column-start and grid-column-end 
     grid-row: 3 / 7; /* grid-row-start and grid-row-end 
} */


/* ! Test questions */

/* .container{
     display: grid;
     grid-gap: 20px;

     Make grid 10 column wide, every other taking up twice the free space 
     grid-template-columns: repeat(5, 1fr 2fr);
      Make grid have 10 explicit rows 50px high each 
     grid-template-rows: repeat(10, 50px);     
}

With item 1 start from col 3 and end at 5 
.item1{
     grid-column: 3 / 5;
}

With item 2 start from col 5 and end at last 
.item2{
     grid-column: 5 / -1;
}

Make item 5 double span 2 cols and rows 
.item5{
     grid-column: span 2;
     grid-row: span 2;
}

Make item 8 2 rows high 
.item8{
     grid-row: span 2;
}

Make item 15 span the entire grid width 
.item15{
     grid-column: 1 / -1;
}

Make item 18 span 4 but end at 9
.item18{
     grid-column: span 4 / 9;
}

Make item 20 start at row 4 and go for 3
.item20{
     grid-row: 4 / span 3;
} */

.container{
     display: grid;
     grid-gap: 20px;
     border: 10px solid var(--yellow);
     grid-template-columns: repeat(auto-fit,minmax(150px,1fr));
}